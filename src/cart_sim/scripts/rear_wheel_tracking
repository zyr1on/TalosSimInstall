#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

Path tracking simulation with rear wheel feedback steering control and PID speed control.

author: Atsushi Sakai(@Atsushi_twi)

"""
import matplotlib.pyplot as plt
import math
import numpy as np
from utils.angle import angle_mod

from scipy import interpolate
from scipy import optimize

import rospy
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Imu
from std_msgs.msg import Float64

from cart_sim.msg import AUTONOMOUS_SteeringMot_Control
from cart_sim.msg import AUTONOMOUS_BrakePedalControl
from cart_sim.msg import AUTONOMOUS_HB_MotorControl
from cart_sim.msg import FB_VehicleSpeed

from rospy_tutorials.msg import Floats

Kp = 15  # speed proportional gain
# steering control parameter
KTH = 1.0
KE = 0.5

# kp: 15
# kd: 0
# ki: 5
# kff: 0 
show_animation = True
dt = 0.1  # [s]
L = 2.9  # [m]

class Positions :
    def __init__(self,x,y)  :
        self.x = x   
        self.y = y

class RearWheel:
    def __init__(self) :
        self.pose_sub = rospy.Subscriber("/XEst",Floats , self.xest_callback)
        self.imu_sub =  rospy.Subscriber("/imu/data", Imu ,self.imu_callback)
        self.speed = 0
        self.speed_sub = rospy.Subscriber("/beemobs/FB_VehicleSpeed",FB_VehicleSpeed,self.speed_callback) # speedi al
        

        self.speed_pub = rospy.Publisher('/beemobs/speed_target_value', Float64,queue_size=1)
        self.steer_pub = rospy.Publisher('/beemobs/steering_target_value' , Float64 , queue_size=1)
        self.current_position= Positions(0.0,0.0)
        self.yaw = 0
        self.isdatacome = False 
        while True :
            if self.isdatacome :
                print("girdim")
                self.main()
                break
    def speed_callback(self,msg):
        self.speed = msg.FB_ReelVehicleSpeed_Ms
        
            
    def imu_callback(self,msg) :
        
        roll, pitch, self.yaw = quaternion_to_euler(msg.orientation.x,msg.orientation.y,msg.orientation.z,msg.orientation.w)
        # if self.i%25 == 0 :
        #     print("my current yaw is :",(self.current_yaw))

    def xest_callback(self, msg):

        self.current_position = Positions(msg.data[0] , msg.data[1])
        self.isdatacome = True
    
    def main(self):
        print("rear wheel feedback tracking start!!")
        ax = []
        ay = []
        targets = [Positions(4197916.5, 2375929.5),Positions(4197912.0, 2375943.0) , Positions(4197909.5, 2375950.5),Positions(4197913.5, 2375951.75)] 
        for i in targets :
            ax.append((i.x))
            ay.append((i.y))
        goal = [ax[-1], ay[-1]]

        reference_path = CubicSplinePath(ax, ay)
        s = np.arange(0, reference_path.length, 0.1)
        
        t, x, y, yaw, v, goal_flag = self.simulate( reference_path, goal , self.current_position.x ,self.current_position.y , self.yaw)

        # Test
        assert goal_flag, "Cannot goal"

        if show_animation:  # pragma: no cover
            plt.close()
            plt.subplots(1)
            plt.plot(ax, ay, "xb", label="input")
            plt.plot(reference_path.X(s), reference_path.Y(s), "-r", label="spline")
            plt.plot(x, y, "-g", label="tracking")
            plt.grid(True)
            plt.axis("equal")
            plt.xlabel("x[m]")
            plt.ylabel("y[m]")
            plt.legend()

            plt.subplots(1)
            plt.plot(s, np.rad2deg(reference_path.calc_yaw(s)), "-r", label="yaw")
            plt.grid(True)
            plt.legend()
            plt.xlabel("line length[m]")
            plt.ylabel("yaw angle[deg]")

            plt.subplots(1)
            plt.plot(s, reference_path.calc_curvature(s), "-r", label="curvature")
            plt.grid(True)
            plt.legend()
            plt.xlabel("line length[m]")
            plt.ylabel("curvature [1/m]")

            plt.show()

    def simulate(self,path_ref, goal ,initialposex,initialposey,initialyaw):
        T = 500.0  # max simulation time
        goal_dis = 0.3
        #print(initialposex,initialposey)
        state = State( x = initialposex , y = initialposey , yaw = initialyaw, v=self.speed)

        time = 0.0
        x = [state.x]
        y = [state.y]
        yaw = [state.yaw]
        v = [state.v]
        t = [0.0]
        goal_flag = False

        s = np.arange(0, path_ref.length, 0.1)
        e, k, yaw_ref, s0 = path_ref.calc_track_error(state.x, state.y, 0.0)
        print("yaw_ref:" ,yaw_ref)
        while T >= time:
            e, k, yaw_ref, s0 = path_ref.calc_track_error(state.x, state.y, s0)
            print("yaw_ref:" ,yaw_ref)

            di = rear_wheel_feedback_control(state, e, k, yaw_ref)
            print("di",di)
            speed_ref = calc_target_speed(state, yaw_ref)
            ai = pid_control(speed_ref, state.v)

            di = math.degrees(di)

            # cartcontrol = cart_control()
            # cartcontrol.throttle = ai/10
            # cartcontrol.brake = 0
            # cartcontrol.steer = di/90
            # cartcontrol.shift_gears = 0
            print("aiiiiiiiiii :",  ai)
            speedpub = ai /20
            steerpub = di 
            print("steeeeeeeeeeeeeerrr :: " ,di)

            self.speed_pub.publish(speedpub)
            self.steer_pub.publish(steerpub)
            state.update(self.current_position,self.yaw , self.speed)

            time = time + dt

            # check goal
            dx = state.x - goal[0]
            dy = state.y - goal[1]
            if math.hypot(dx, dy) <= goal_dis:
                goal_flag = True
                break

            x.append(state.x)
            y.append(state.y)
            yaw.append(state.yaw)
            v.append(state.v)
            t.append(time)

            if show_animation:
                plt.cla()
                # for stopping simulation with the esc key.
                plt.gcf().canvas.mpl_connect('key_release_event',
                        lambda event: [exit(0) if event.key == 'escape' else None])
                plt.plot(path_ref.X(s), path_ref.Y(s), "-r", label="course")
                plt.plot(x, y, "ob", label="trajectory")
                plt.plot(path_ref.X(s0), path_ref.Y(s0), "xg", label="target")
                plt.axis("equal")
                plt.grid(True)
                plt.title(f"speed[km/h]:{round(state.v * 3.6, 2):.2f}, target s-param:{s0:.2f}")
                plt.pause(0.0001)

        return t, x, y, yaw, v, goal_flag

class State:
    def __init__(self, x, y, yaw, v, direction=1):
        self.x = x
        self.y = y
        self.yaw = yaw
        self.v = v
        self.direction = direction

    def update(self, current_position , yaw , speed):
        self.x = current_position.x
        self.y = current_position.y
        self.v = speed
        self.yaw = yaw


        # self.x   = self.x + self.v * math.cos(self.yaw) * dt
        # self.y   = self.y + self.v * math.sin(self.yaw) * dt
        # self.yaw = self.yaw + self.v / L * math.tan(delta) * dt
        # self.v   = self.v + a * dt

def quaternion_to_euler(x, y, z, w):
    # Roll (φ)
    sinr_cosp = 2 * (w * x + y * z)
    cosr_cosp = 1 - 2 * (x * x + y * y)
    roll = np.arctan2(sinr_cosp, cosr_cosp)

    # Pitch (θ)
    sinp = 2 * (w * y - z * x)
    pitch = np.arcsin(np.clip(sinp, -1.0, 1.0))

    # Yaw (ψ)
    siny_cosp = 2 * (w * z + x * y)
    cosy_cosp = 1 - 2 * (y * y + z * z)
    yaw = np.arctan2(siny_cosp, cosy_cosp)

    return roll, pitch, yaw

class CubicSplinePath:
    def __init__(self, x, y):
        x, y = map(np.asarray, (x, y))
        s = np.append([0],(np.cumsum(np.diff(x)**2) + np.cumsum(np.diff(y)**2))**0.5)

        self.X = interpolate.CubicSpline(s, x)
        self.Y = interpolate.CubicSpline(s, y)

        self.dX = self.X.derivative(1)
        self.ddX = self.X.derivative(2)

        self.dY = self.Y.derivative(1)
        self.ddY = self.Y.derivative(2)

        self.length = s[-1]

    def calc_yaw(self, s):
        dx, dy = self.dX(s), self.dY(s)
        return np.arctan2(dy, dx)

    def calc_curvature(self, s):
        dx, dy   = self.dX(s), self.dY(s)
        ddx, ddy   = self.ddX(s), self.ddY(s)
        return (ddy * dx - ddx * dy) / ((dx ** 2 + dy ** 2)**(3 / 2))

    def __find_nearest_point(self, s0, x, y):
        def calc_distance(_s, *args):
            _x, _y= self.X(_s), self.Y(_s)
            return (_x - args[0])**2 + (_y - args[1])**2

        def calc_distance_jacobian(_s, *args):
            _x, _y = self.X(_s), self.Y(_s)
            _dx, _dy = self.dX(_s), self.dY(_s)
            return 2*_dx*(_x - args[0])+2*_dy*(_y-args[1])

        minimum = optimize.fmin_cg(calc_distance, s0, calc_distance_jacobian, args=(x, y), full_output=True, disp=False)
        return minimum

    def calc_track_error(self, x, y, s0):
        ret = self.__find_nearest_point(s0, x, y)

        s = ret[0][0]
        e = ret[1]

        k   = self.calc_curvature(s)
        yaw = self.calc_yaw(s)

        dxl = self.X(s) - x
        dyl = self.Y(s) - y
        angle = pi_2_pi(yaw - math.atan2(dyl, dxl))
        if angle < 0:
            e*= -1

        return e, k, yaw, s

def pid_control(target, current):
    a = Kp * (target - current)
    return a

def pi_2_pi(angle):
    return angle_mod(angle)

def rear_wheel_feedback_control(state, e, k, yaw_ref):
    v = state.v
    th_e = pi_2_pi(state.yaw - yaw_ref)

    omega = v * k * math.cos(th_e) / (1.0 - k * e) - \
        KTH * abs(v) * th_e - KE * v * math.sin(th_e) * e / th_e

    if th_e == 0.0 or omega == 0.0:
        print("yat lannnnnnnnnnnnnnn")
        return 0.0

    delta = math.atan2(L * omega / v, 1.0)

    return delta



def calc_target_speed(state, yaw_ref):
    target_speed = 10.0 / 3.6

    dyaw = yaw_ref - state.yaw
    switch = math.pi / 4.0 <= dyaw < math.pi / 2.0

    if switch:
        state.direction *= -1
        return 0.0

    if state.direction != 1:
        return -target_speed

    return target_speed


#targets = [positions(4197924,2375922.),positions(4197932.0, 2375926.5),positions(4197922.5, 2375938.5),positions(4197922.5, 2375938.75),positions(4197915.0, 2375938.75)] 



if __name__ == '__main__':
    rospy.init_node("rear_wheel")
    
    RearWheel()
    rospy.spin()
